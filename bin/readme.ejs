[![Build Status](https://travis-ci.com/TheSpicyMeatball/console-log-it.svg?branch=main)](https://travis-ci.com/TheSpicyMeatball/console-log-it)
[![Coverage Status](https://coveralls.io/repos/github/TheSpicyMeatball/console-log-it/badge.svg?branch=main)](https://coveralls.io/github/TheSpicyMeatball/console-log-it?branch=main)
[![dependencies Status](https://status.david-dm.org/gh/TheSpicyMeatball/console-log-it.svg)](https://david-dm.org/TheSpicyMeatball/console-log-it)
[![npm version](https://badge.fury.io/js/console-log-it.svg)](https://badge.fury.io/js/console-log-it)

# <%= package.name %>

> <%= package.description %>

<p><b>Version:</b> <%= package.version %></p>

<h2>Summary of Utils</h2>

> Click on each function name for details and examples

<%- generateSummaryTable(utils) %>

<h2>Examples</h2>
<p>Here are some examples of things you can do with <code>console-log-it</code>:</p>

<h3>Boxes</h3>

![Status Logs](https://github.com/TheSpicyMeatball/console-log-it/blob/main/images/boxes.png?raw=true)

<h3>Core &amp; Custom Statuses</h3>

![Status Logs](https://github.com/TheSpicyMeatball/console-log-it/blob/main/images/status-logs.png?raw=true)

<h3>Change Your Line Style</h3>

![Status Logs](https://github.com/TheSpicyMeatball/console-log-it/blob/main/images/style.png?raw=true)

<h2>Interfaces &amp; Types</h2>
<p>
  These are importable if you are using TypeScript. If you're not using TypeScript, you can simply use 
  these as a reference to the shapes of the objects and the potential values to pass into the functions.
</p>

```
<%- interfaces %>
```

<a href="#package-contents"></a>
<h2>Package Contents</h2>

Within the module you'll find the following directories and files:

```html
package.json
CHANGELOG.md -- history of changes to the module
README.md -- this file
/<%= fileTree.name -%><% fileTree.children.forEach( function(child){ if (child.type == 'directory') { %>
  └───/<%= child.name -%><% child.children.forEach(function(grandChild){ if (grandChild.type == 'directory') { %>
    └───/<%= grandChild.name -%><% grandChild.children.forEach(function(greatGrand){ %>
      └───<%= greatGrand.name -%> - <%= formatBytes(greatGrand.size) -%><% }) } else { %>
      └───<%= grandChild.name -%> - <%= formatBytes(grandChild.size) -%><% } })} else { %>
  └───<%= child.name -%> - <%= formatBytes(child.size) -%><% }}) %>
```

<a href="#license"></a>
<h2>License</h2>

<%= package.license %>

<% if (package.author) { %>
<a href="#author"></a>
<h2>Author</h2>
<% if (package.author.name) { %><%= package.author.name %> [<%= package.author.email %>](<%= package.author.email %>)<% } else { %><%= package.author %><% } %>
<% } %>

<% if (package.contributors) { %>
<a href="#contributors"></a>
<h2>Contributors</h2>

<% package.contributors.forEach(function(contributor) { %>
  <%= contributor %>
<% }) %>
<% } %>

<a href="#dependencies"></a>
<h2>Dependencies</h2>

<% const dependencies = package.dependencies ? Object.getOwnPropertyNames(package.dependencies) : []; %>
<% if (dependencies && dependencies.length > 0) { %>
<table>
<% dependencies.forEach(function(dependency) { %>
  <tr>
    <td>
      <%= dependency %>
    </td>
    <td>
      <%= package.dependencies[dependency] %>
    </td>
  </tr>
<% }) %>
</table>
<% } else { %>
None
<% } %>